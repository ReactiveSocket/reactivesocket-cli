buildscript {
    ext.kotlin_version = '1.2.30'
    repositories {
        maven { url "http://dl.bintray.com/kotlin/kotlin-dev" }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.shyiko:ktlint:0.19.0"
    }
}

plugins {
    id "com.gradle.build-scan" version "1.12.1"
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'net.nemerosa.versioning' version '2.6.1'
    id 'io.codearte.nexus-staging' version '0.11.0'
    id "org.jlleitschuh.gradle.ktlint" version "3.0.1"
}

buildScan { licenseAgreementUrl = 'https://gradle.com/terms-of-service'; licenseAgree = 'yes' }

description = 'RSocket CLI.'

ext.junitJupiterVersion = '5.1.0'

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'maven'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven-publish'

group = 'com.baulsupp'
mainClassName = "io.rsocket.cli.Main"

versioning {
  releaseMode = project.hasProperty('releaseMode') ? project.property('releaseMode') : 'snapshot'
}

version = versioning.info.display

tasks.withType(JavaCompile) {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
  kotlinOptions.jvmTarget = "1.8"
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

distTar {
  compression = Compression.GZIP
}

task sourceJar(type: Jar) {
  from sourceSets.main.allSource
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourceJar {
        classifier "sources"
      }
    }
  }
}

repositories {
  mavenLocal()
  maven { url 'http://repo.spring.io/milestone' }
  maven { url 'https://oss.jfrog.org/libs-snapshot' }
  maven { url 'https://dl.bintray.com/reactivesocket/RSocket' }
  maven { url "https://jitpack.io" }
  mavenCentral()
}
  
dependencies {
  compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlin_version}"
  compile "org.jetbrains.kotlin:kotlin-reflect:${kotlin_version}"

  compile 'io.rsocket:rsocket-transport-netty:0.10.3'
  compile 'io.rsocket:rsocket-transport-local:0.10.3'

  compile 'io.airlift:airline:0.8'
  compile 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.9.4'
  compile 'com.fasterxml.jackson.core:jackson-core:2.9.4'
  compile 'com.fasterxml.jackson.core:jackson-databind:2.9.4'
  compile 'com.fasterxml.jackson.module:jackson-module-afterburner:2.9.4'
  compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.9.4'
  compile 'org.slf4j:slf4j-jdk14:1.7.25'

  compile 'org.eclipse.jetty.http2:http2-http-client-transport:9.4.8.v20171121'
  compile 'org.mortbay.jetty.alpn:alpn-boot:8.1.12.v20180117'
  compile 'com.github.vjames19.kotlin-futures:kotlin-futures-jdk8:0.4.0'
  compile 'com.spotify:completable-futures:0.3.2'
  compile 'com.spotify:completable-futures:0.3.2'

  runtime 'org.slf4j:slf4j-jdk14:1.7.25'

  // JUnit Jupiter API and TestEngine implementation
  testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
  testRuntime("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

  // If you also want to support JUnit 3 and JUnit 4 tests
  testRuntime("org.junit.vintage:junit-vintage-engine:5.1.0")

  testRuntime("org.junit.platform:junit-platform-launcher:1.1.0")

  testCompile "org.jetbrains.kotlin:kotlin-test:${kotlin_version}"
  testCompile "org.jetbrains.kotlin:kotlin-test-junit:${kotlin_version}"

  testRuntime group: 'org.slf4j', name: 'slf4j-jdk14', version: '1.7.25'

  testCompile group: 'com.squareup.okhttp3', name: 'okhttp-testing-support', version: '3.10.0'
  testCompile group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '3.10.0'

  compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:${kotlin_version}"
}

test {
  testLogging.showStandardStreams = false
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = (selection.candidate.group == "io.netty" && selection.candidate.version ==~ /5\..*/) || 
            	(selection.candidate.version ==~ /.*(beta.*|M\d|alpha.*)/)
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

test {
    useJUnitPlatform {
        excludeTags 'slow'
        includeEngines 'junit-jupiter', 'junit-vintage'
    }

    failFast = true
}

